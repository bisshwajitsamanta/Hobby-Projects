#!/usr/bin/env bash
set -euo pipefail

# ------------------------------------------------------------
# init-azure-packer.sh
# Creates:
#  - Resource Group (RG)
#  - Service Principal (Contributor) scoped to that RG
#  - spn.json (SDK auth) + .env with handy exports
#
# Usage:
#   ./init-azure-packer.sh rg-packer-demo eastus
#   ./init-azure-packer.sh <RG_NAME> <LOCATION> [SUBSCRIPTION_ID]
# ------------------------------------------------------------

RG="${1:-rg-packer-demo}"
LOCATION="${2:-eastus}"
SUBSCRIPTION_ID="${3:-}"

need() { command -v "$1" >/dev/null 2>&1 || { echo "❌ '$1' not found. Please install it."; exit 1; }; }

need az
need jq

echo "🔐 Checking Azure CLI login..."
if ! az account show >/dev/null 2>&1; then
  echo "➡️  Not logged in. Opening browser for login..."
  az login >/dev/null
fi

# If a subscription id was provided, set it; else keep current default
if [[ -n "$SUBSCRIPTION_ID" ]]; then
  echo "🪪 Setting subscription: $SUBSCRIPTION_ID"
  az account set --subscription "$SUBSCRIPTION_ID"
fi

# Show the active subscription to confirm
ACTIVE_SUB=$(az account show --query id -o tsv)
ACTIVE_SUB_NAME=$(az account show --query name -o tsv)
echo "✅ Active subscription: $ACTIVE_SUB_NAME ($ACTIVE_SUB)"

# Create the resource group (idempotent)
echo "🧱 Creating/ensuring Resource Group: $RG in $LOCATION"
az group create -n "$RG" -l "$LOCATION" >/dev/null
SCOPE="/subscriptions/$ACTIVE_SUB/resourceGroups/$RG"

# Create SP with Contributor at RG scope
APP_NAME="sp-packer-terraform"
SPN_FILE="spn.json"

echo "👤 Creating Service Principal '$APP_NAME' with Contributor on scope:"
echo "   $SCOPE"
# If the SP already exists, recreate credentials (so script is idempotent)
if az ad sp list --display-name "$APP_NAME" --query "[0].appId" -o tsv >/dev/null 2>&1; then
  echo "ℹ️  Service Principal exists. Creating fresh RBAC assignment + creds…"
fi

az ad sp create-for-rbac \
  --name "$APP_NAME" \
  --role "Contributor" \
  --scopes "$SCOPE" \
  --sdk-auth > "$SPN_FILE"

echo "💾 Wrote credentials to: $SPN_FILE"
CLIENT_ID=$(jq -r .clientId "$SPN_FILE")
CLIENT_SECRET=$(jq -r .clientSecret "$SPN_FILE")
TENANT_ID=$(jq -r .tenantId "$SPN_FILE")
SUB_ID=$(jq -r .subscriptionId "$SPN_FILE")

# Write a helper .env you can source for Packer/Terraform
ENV_FILE=".env.azure"
cat > "$ENV_FILE" <<EOF
# Generated by init-azure-packer.sh
export ARM_CLIENT_ID="$CLIENT_ID"
export ARM_CLIENT_SECRET="$CLIENT_SECRET"
export ARM_TENANT_ID="$TENANT_ID"
export ARM_SUBSCRIPTION_ID="$SUB_ID"

# Convenience vars
export AZ_RG="$RG"
export AZ_LOCATION="$LOCATION"
export AZ_SCOPE="$SCOPE"
EOF

echo "💾 Wrote environment exports to: $ENV_FILE"

echo "✅ Done."
echo
echo "Next steps:"
echo "1) Load env vars for this terminal:"
echo "     source $ENV_FILE"
echo "2) Test your access (creates a tag on the RG):"
echo "     az group update -n \$AZ_RG --set tags.init=ok"
echo "3) Start your Packer build referencing env vars, e.g.:"
echo "     packer init ./"
echo "     packer build -var \"client_id=\$ARM_CLIENT_ID\" \\"
echo "                  -var \"client_secret=\$ARM_CLIENT_SECRET\" \\"
echo "                  -var \"subscription_id=\$ARM_SUBSCRIPTION_ID\" \\"
echo "                  -var \"tenant_id=\$ARM_TENANT_ID\" ubuntu.pkr.hcl"
echo
echo "🧹 Cleanup later:"
echo "   az group delete -n \$AZ_RG -y"