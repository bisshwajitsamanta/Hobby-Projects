#!/usr/bin/env bash
set -euo pipefail

# ------------------------------------------------------------
# setup-tf-backend.sh
# Sets up Terraform remote state on Azure:
#  - Ensures Microsoft.Storage RP is registered
#  - Creates Storage Account (<=24 chars, lowercase) + blob container
#  - Enables blob versioning + soft delete
#  - Grants SPN (from .env.azure) Storage Blob Data Contributor
#  - Writes backend.hcl for 'terraform init -backend-config=backend.hcl'
#
# Usage:
#   source .env.azure
#   ./setup-tf-backend.sh              # uses AZ_RG/AZ_LOCATION from env
#   ./setup-tf-backend.sh <RG> <LOC>   # override RG/Location
#
# Requires:
#   - az, jq installed
#   - .env.azure with ARM_* and (optionally) AZ_RG/AZ_LOCATION
# ------------------------------------------------------------

need() { command -v "$1" >/dev/null 2>&1 || { echo "‚ùå '$1' not found. Please install it."; exit 1; }; }
need az
need jq

# Load env if present
if [[ -f ".env.azure" ]]; then
  # shellcheck disable=SC1091
  source .env.azure
fi

RG="${1:-${AZ_RG:-rg-packer-demo}}"
LOCATION="${2:-${AZ_LOCATION:-eastus}}"

# Basic sanity for required ARM_* vars
: "${ARM_SUBSCRIPTION_ID:?Set ARM_SUBSCRIPTION_ID (source .env.azure)}"
: "${ARM_CLIENT_ID:?Set ARM_CLIENT_ID (source .env.azure)}"
: "${ARM_TENANT_ID:?Set ARM_TENANT_ID (source .env.azure)}"
: "${ARM_CLIENT_SECRET:?Set ARM_CLIENT_SECRET (source .env.azure)}"

echo "üîê Checking Azure CLI login..."
if ! az account show >/dev/null 2>&1; then
  echo "‚û°Ô∏è  Not logged in. Opening browser for login..."
  az login >/dev/null
fi

echo "ü™™ Ensuring subscription is set: $ARM_SUBSCRIPTION_ID"
az account set --subscription "$ARM_SUBSCRIPTION_ID"

ACTIVE_SUB=$(az account show --query id -o tsv)
ACTIVE_SUB_NAME=$(az account show --query name -o tsv)
echo "‚úÖ Active subscription: $ACTIVE_SUB_NAME ($ACTIVE_SUB)"

echo "üß± Ensuring Resource Group: $RG in $LOCATION"
az group create -n "$RG" -l "$LOCATION" --only-show-errors >/dev/null

echo "‚öôÔ∏è  Checking Microsoft.Storage RP registration..."
STATE=$(az provider show -n Microsoft.Storage --query registrationState -o tsv || echo "NotRegistered")
if [[ "$STATE" != "Registered" ]]; then
  echo "üîß Registering Microsoft.Storage RP (was: $STATE)"
  az provider register -n Microsoft.Storage >/dev/null
  echo -n "‚è≥ Waiting for registration"
  for _ in {1..40}; do
    sleep 5
    STATE=$(az provider show -n Microsoft.Storage --query registrationState -o tsv || echo "NotRegistered")
    [[ "$STATE" == "Registered" ]] && break
    echo -n "."
  done
  echo
fi
echo "‚úÖ Microsoft.Storage RP: $STATE"

# ---- Deterministic Storage Account name ----
# hash RG name + subscription ‚Üí consistent, <=24 chars
HASH=$(echo -n "$RG$ARM_SUBSCRIPTION_ID" | md5sum | cut -c1-8)
SA_NAME="tf${HASH}"
CONTAINER="tfstate"
KEY="terraform.tfstate"

echo "üìù Using storage account: $SA_NAME"

# ---- Create/ensure Storage Account ----
if az storage account show -g "$RG" -n "$SA_NAME" >/dev/null 2>&1; then
  echo "‚ÑπÔ∏è  Storage account exists: $SA_NAME"
else
  echo "üöÄ Creating storage account: $SA_NAME"
  az storage account create \
    -g "$RG" -n "$SA_NAME" -l "$LOCATION" \
    --sku Standard_LRS --kind StorageV2 --https-only true
  echo "‚úÖ Created storage account: $SA_NAME"
fi

# ---- Enable blob versioning + soft delete ----
echo "üõ°Ô∏è  Enabling blob versioning + soft delete (14 days)"
az storage account blob-service-properties update \
  -g "$RG" -n "$SA_NAME" \
  --enable-versioning true \
  --enable-delete-retention true \
  --delete-retention-days 14 >/dev/null || true

# ---- Grant SPN data-plane RBAC ----
SA_SCOPE="/subscriptions/$ACTIVE_SUB/resourceGroups/$RG/providers/Microsoft.Storage/storageAccounts/$SA_NAME"
echo "üîè Assigning 'Storage Blob Data Contributor' to SPN on $SA_NAME"
az role assignment create \
  --assignee "$ARM_CLIENT_ID" \
  --role "Storage Blob Data Contributor" \
  --scope "$SA_SCOPE" >/dev/null || true

echo "‚è≥ Waiting ~45s for RBAC to propagate..."
sleep 45

# ---- Create/ensure container ----
echo "üìÅ Ensuring blob container '$CONTAINER'"
az storage container create \
  --account-name "$SA_NAME" \
  --name "$CONTAINER" \
  --auth-mode login >/dev/null || true

# ---- Write backend.hcl ----
BACKEND_HCL="backend.hcl"
cat > "$BACKEND_HCL" <<EOF
resource_group_name  = "$RG"
storage_account_name = "$SA_NAME"
container_name       = "$CONTAINER"
key                  = "$KEY"
EOF
echo "üíæ Wrote Terraform backend config: $BACKEND_HCL"

# ---- Append backend vars to .env.azure ----
if [[ -f ".env.azure" ]]; then
  {
    echo ""
    echo "# Backend (generated by setup-tf-backend.sh)"
    echo "export TF_BACKEND_RG=\"$RG\""
    echo "export TF_BACKEND_SA=\"$SA_NAME\""
    echo "export TF_BACKEND_CONTAINER=\"$CONTAINER\""
    echo "export TF_BACKEND_KEY=\"$KEY\""
  } >> .env.azure
  echo "üíæ Appended backend exports to .env.azure"
fi

echo "‚úÖ Backend ready."
echo
echo "Next steps:"
echo "  1) source .env.azure"
echo "  2) cd terraform"
echo "  3) terraform init -backend-config=../backend.hcl"
echo "  4) terraform apply -var \"subscription_id=\$ARM_SUBSCRIPTION_ID\" -var \"tenant_id=\$ARM_TENANT_ID\" \\"
echo "                     -var \"client_id=\$ARM_CLIENT_ID\" -var \"client_secret=\$ARM_CLIENT_SECRET\" \\"
echo "                     -var \"resource_group_image=\$AZ_RG\" -var \"location=\$AZ_LOCATION\" -var \"image_name=ubuntu-golden\" \\"
echo "                     -var \"ssh_public_key=\$(cat ~/.ssh/id_ed25519.pub)\""
echo
echo "üßπ Cleanup later:"
echo "  terraform -chdir=terraform destroy -auto-approve"
echo "  az group delete -n $RG -y"